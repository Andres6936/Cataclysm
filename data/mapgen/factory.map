### factory.map
#
# The following tags are used: (# marks a line or part of a line as a comment)
#
# "name:" - Required.  A description of this spec.  It should appear first for
#           debugging reasons.
# "type:" - Required.  The World_terrain name this spec applies to.  See
#           world_terrain.dat for a list of World_terrains.
# "adjacent" - If this tag is present, then this map is an "adjacency" map.
#              This should appear before "base_terrain:" or "tile:" lines.
# "base_terrain:" - Recommended.  A terrain specification to be used for tiles
#                   which are not defined in the map section.
# "weight:" - A weight used when randomly choosing specs.  If omitted, the
#             weight defaults to 100.  A spec with weight 200 is twice as likely#             to be used as one with weight 100.
# "tile:" - Defines a terrain used in the map section.
# "items:" - Defines an item drop used in the map section.
# "map:" - Defines the start of the map section.
# "endmap" - Defines the end of the map section.
# "done" - Required.  Marks the end of this spec.
#
# See the bottom of this file for details on base_terrain and tile terrain
# specifications, item drop specifications, and adjacency maps.

name: 0_std_factory_whales
subname: 0_std_factory_whales
type: factory
neighbors: 0

tile: o = grass / dirt
tile: * = pavement
tile: # = stone wall
tile: " = w:3 window / w:1 stone wall
tile: 0 = w:10 window / w:1 stone wall
tile: . = floor
tile: , = floor_lock
tile: % = counter
tile: T = toilet
tile: K = sink
tile: + = w:5 locked door / w:1 closed door
tile: ' = w:5 closed door / w:1 open door
tile_group: ! = w:4 chain-link fence / w:1 pavement

subst: X = w:3 X / w:2 x
tile: X = glass wall
tile: x = w:6 stone wall / w:1 window

shuffle: abc
tile: a = w:5 closed door / w:1 locked door / w:1 open door
tile: b = stone wall

shuffle: defg
tile: d = w:5 locked door / w:1 closed door
tile: efgh = w:6 stone wall / w:1 window

shuffle: ijk
shuffle: lmn
tile: il = w:10 closed door / w:1 open door
tile: jkmn = stone wall

tile: CD = floor
furniture: C = wood chair
furniture: D = desk
item_group: 70 D = items_office

tile: U = dumpster
item_group: 80 U = items_trash

tile: tL = shelves
item_group: 75 t = items_factory_tools
item_group: 75 L = items_cleaning

map:
ooooooooooooooooooooooooo
ooooooooooooooooooooooooo
oo###"""###+++###"""###oo
oo#.......'....%%%%%%.#oo
oo#ijk#lmn#....C.C.C..#oo
oo"...#...#..........."oo
oo"ttt#LLL#....%%%%%%."oo
oo"########....C.C.C.."oo
oo#...................#oo
oo#.%%%%%%.....%%%%%%.#oo
oo".C.C.C......C.C.C.."oo
oo"..................."oo
oo#.%%%%%%.....%%%%%%.#oo
oo#.C.C.C......C.C.C..#oo
oo"...................#oo
oo"...........,#XXXXXX#oo
oo#+##+##.....,a......#oo
oo#..#..#.....,b..DDD.0oo
oo#TK#TK#.....,c...C..#oo
oo#######defgh####0#0##oo
oo!***********UUU*****!oo
oo!*******************!oo
oo!*******************!oo
oo!*******************!oo
oo!!!!!!!!!!!!!!!!!!!!!oo
endmap
done

name: 0_std_factory_whales_roof
subname: 0_std_factory_whales
type: factory
level: 1
neighbors: 0

tile: o = empty
tile: . = roof

map:
ooooooooooooooooooooooooo
ooooooooooooooooooooooooo
oo.....................oo
oo.....................oo
oo.....................oo
oo.....................oo
oo.....................oo
oo.....................oo
oo.....................oo
oo.....................oo
oo.....................oo
oo.....................oo
oo.....................oo
oo.....................oo
oo.....................oo
oo.....................oo
oo.....................oo
oo.....................oo
oo.....................oo
oo.....................oo
ooooooooooooooooooooooooo
ooooooooooooooooooooooooo
ooooooooooooooooooooooooo
ooooooooooooooooooooooooo
ooooooooooooooooooooooooo
endmap
done

# Since all "puzzle pieces" of a given neighbors: value are the same shape, we
# can group them all into the same subname and only have one roof!  Yay!

# The workfloor; various "puzzle pieces."

name: n1_floor_factory_whales_1
subname: factory_1
type: factory
neighbors: 1

tile: o = grass / dirt
tile: * = pavement
tile: . = floor
tile: , = floor_lock
tile: # = stone wall
tile: " = w:4 window / w:1 stone wall
tile: 0 = w:10 window / w:1 stone wall
tile: + = w:5 closed door / w:1 open door
tile: T = toilet
tile: K = sink
tile: % = counter

tile: CD = floor
furniture: C = wood chair
furniture: D = desk
item_group: 70 D = items_office

tile_group: ! = w:4 chain-link fence / w:1 pavement

subst: X = w:3 X / w:1 x
tile: X = glass wall
tile: x = w:6 stone wall / w:1 window

shuffle: abc
tile: a = w:5 locked door / w:3 closed door / w:1 open door
tile: bc = stone wall

shuffle: defghi
tile: d = w:5 closed door / w:1 open door
tile: efghi = stone wall

tile: tL = shelves
item_group: 75 t = items_factory_tools
item_group: 75 L = items_cleaning

tile: U = dumpster
item_group: 80 U = items_trash

map:
oo#...................#oo
oo#..................."oo
oo########......%%%%%."oo
oo#t.LLL.i......C.C.C."oo
oo#t.....h............#oo
oo#t.....g......%%%%%.#oo
oo####def#......C.C.C."oo
oo#T.#................"oo
oo#K.+..........%%%%%."oo
oo####..%%%%%...C.C.C.#oo
oo#T.#..C.C.C.........#oo
oo#K.+..........%%%%%."oo
oo####..%%%%%...C.C.C."oo
oo#T.#..C.C.C........."oo
oo#K.+........,#XXXXXX#oo
oo####..%%%%%.,a......#oo
oo#T.#..C.C.C.,b..DDD.0oo
oo#K.+........,c...C..#oo
oo#####j""k""l###0##0##oo
oo!*************UUU***!oo
oo!*******************!oo
oo!*******************!oo
oo!*******************!oo
oo!*******************!oo
oo!!!!!!!!!!!!!!!!!!!!!oo
endmap
done



name: n1_machinery_factory_whales_1
subname: factory_1
type: factory
neighbors: 1

tile: o = grass / dirt
tile: * = pavement
tile: . = floor
tile: , = floor_lock
tile: # = stone wall
tile: " = w:4 window / w:1 stone wall
tile: 0 = w:10 window / w:1 stone wall
tile: + = w:5 closed door / w:1 open door
tile: T = toilet
tile: K = sink
tile: % = counter

tile: CD = floor
furniture: C = wood chair
furniture: D = desk
item_group: 70 D = items_office

tile_group: ! = w:4 chain-link fence / w:1 pavement

subst: X = w:3 X / w:1 x
tile: X = glass wall
tile: x = w:6 stone wall / w:1 window

shuffle: abc
tile: a = w:5 locked door / w:3 closed door / w:1 open door
tile: bc = stone wall

shuffle: defghi
tile: d = w:5 closed door / w:1 open door
tile: efghi = stone wall

tile: tL = shelves
item_group: 75 t = items_factory_tools
item_group: 75 L = items_cleaning

tile: U = dumpster
item_group: 80 U = items_trash

map:
oo#...................#oo
oo#...................#oo
oo#...................#oo
oo#...................#oo
oo#...................#oo
oo#...................#oo
oo#...................#oo
oo#...................#oo
oo#...................#oo
oo#...................#oo
oo#...................#oo
oo#...................#oo
oo#...................#oo
oo#...................#oo
oo#...................#oo
oo#...................#oo
oo#...................#oo
oo#...................#oo
oo#####################oo
oo!*******************!oo
oo!*******************!oo
oo!*******************!oo
oo!*******************!oo
oo!*******************!oo
oo!!!!!!!!!!!!!!!!!!!!!oo
endmap
done



1-NEIGHBOR TEMPLATE:

map:
oo#...................#oo
oo#...................#oo
oo#...................#oo
oo#...................#oo
oo#...................#oo
oo#...................#oo
oo#...................#oo
oo#...................#oo
oo#...................#oo
oo#...................#oo
oo#...................#oo
oo#...................#oo
oo#...................#oo
oo#...................#oo
oo#...................#oo
oo#...................#oo
oo#...................#oo
oo#...................#oo
oo#####################oo
oo!*******************!oo
oo!*******************!oo
oo!*******************!oo
oo!*******************!oo
oo!*******************!oo
oo!!!!!!!!!!!!!!!!!!!!!oo
endmap
done

# A recommended format for spec names is <DESC>_<TYPE>_<NAME>
#  <DESC> is a short description of the unusual feature of this spec.  If it is
#         not unusual, use "std".
#  <TYPE> is the World_terrain used here.
#  <NAME> is your name, initials, or handle.
# This format makes it easy to identify the spec when debugging.
#
# The "tile:" line uses the following format:
#       tile: abc = w:20 dirt / w:15 grass / tree
# "abc" is a list of characters which, when found in the map section, will use
# this terrain.  You can include spaces and they will be ignored.
# " = " delineates between the list of characters and the terrain spec.  It must
# be surrounded by spaces.
# The rest of the line is a list of terrain names (from terrain.dat).  A terrain
# is randomly picked from this list.  You must place " / " between terrain
# names.  You can also include "w:20" with the terrain name to define its
# weight for random selection.  If omitted, the weight defaults to 10.  A
# terrain with weight 20 is twice as likely to be chosen as a terrain with
# weight 10.
#
# The "base_terrain:" line uses the same terrain spec format, but of course the
# list of characters and the " = " are not used.
#
# The "items:" line uses the following format:
#       50 abc = rock / w:20 stick
# The number at the front MUST be present.  It's the percentage chance of
# placing a single item.  If one item is used, the same chance is used to decide
# whether to place a second item, and so on until the chance fails.  It must be
# between 1 and 99.  If it's not, you will be warned and the chance will be
# corrected.
# The rest of the line is very similar to the terrain specifications, but with
# item names (from items.dat) instead of terrain names.
#
# The "map:" tag should appear on its own line.  It is followed by 25 lines of
# 25 characters each - you will be warned if there are missing characters or
# extra characters.  It is a list of characters which refer back to the "tile:"
# or "items:" lines.  If no matching "tile:" is found, the base_terrain is used;
# if the base_terrain is not present, the first terrain in terrain.dat is used.
#
# "Adjacency" specs are identified by placing the "adjacent" tag in the spec.
# These specs are used when generating a map ADJACENT to the specified type.
# Adjacency specs should be designed as if the adjacent terrain were to the
# north; the spec will be rotated as needed.
# The base terrain is generated, and then the adjacency map is generated on top.
# Adjacency specs are the same as normal maps, but with the difference that
# it is allowed to use "nothing" as a terrain name.  If "nothing" is selected,
# then the terrain in the map will be unchanged.  Also, ONLY floor terrain will
# be changed; non-floor terrain will be unchanged.
